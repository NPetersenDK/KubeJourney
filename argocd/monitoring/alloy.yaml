apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // Syslog receiver for network devices
    loki.source.syslog "network_devices" {
      listener {
        address  = "0.0.0.0:514"
        protocol = "udp"
        labels   = {
          job    = "syslog",
          source = "network",
        }
      }
      
      forward_to = [loki.write.local.receiver]
    }

    // Kubernetes pod logs discovery and collection
    discovery.kubernetes "pods" {
      role = "pod"
    }

    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
        separator     = "/"
        target_label  = "job"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        target_label  = "__path__"
        replacement   = "/var/log/pods/*$1/*.log"
      }
    }

    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.write.local.receiver]
    }

    // Prometheus metrics scraping
    prometheus.scrape "kubernetes_pods" {
      targets = discovery.relabel.pod_logs.output
      forward_to = [prometheus.remote_write.local.receiver]

      clustering {
        enabled = false
      }
    }

    // Write logs to Loki
    loki.write "local" {
      endpoint {
        url = "http://loki:3100/loki/api/v1/push"
      }
    }

    // Write metrics to Prometheus (optional - if you want Alloy to also scrape metrics)
    prometheus.remote_write "local" {
      endpoint {
        url = "http://prometheus:9090/api/v1/write"
      }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  - pods/log
  - events
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
- kind: ServiceAccount
  name: alloy
  namespace: monitoring
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  namespace: monitoring
  labels:
    app: alloy
spec:
  selector:
    matchLabels:
      app: alloy
  template:
    metadata:
      labels:
        app: alloy
    spec:
      serviceAccountName: alloy
      hostNetwork: false
      dnsPolicy: ClusterFirst
      containers:
      - name: alloy
        image: grafana/alloy:v1.11.2
        args:
          - run
          - /etc/alloy/config.alloy
          - --server.http.listen-addr=0.0.0.0:12345
          - --storage.path=/var/lib/alloy/data
        ports:
        - containerPort: 12345
          name: http
          protocol: TCP
        - containerPort: 514
          name: syslog-tcp
          protocol: TCP
        - containerPort: 514
          name: syslog-udp
          protocol: UDP
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /etc/alloy
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: config
        configMap:
          name: alloy-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
---
apiVersion: v1
kind: Service
metadata:
  name: alloy
  namespace: monitoring
  labels:
    app: alloy
spec:
  selector:
    app: alloy
  ports:
  - name: http
    protocol: TCP
    port: 12345
    targetPort: 12345
  - name: syslog-udp
    protocol: UDP
    port: 514
    targetPort: 514
  - name: syslog-tcp
    protocol: TCP
    port: 514
    targetPort: 514
  type: ClusterIP
---
# LoadBalancer service to expose syslog externally via BGP
apiVersion: v1
kind: Service
metadata:
  name: alloy-syslog
  namespace: monitoring
  labels:
    app: alloy
    bgp: "pool-a"
    bgp-announce: "true"
spec:
  selector:
    app: alloy
  ports:
  - name: syslog-tcp
    protocol: TCP
    port: 514
    targetPort: 514
  - name: syslog-udp
    protocol: UDP
    port: 514
    targetPort: 514
  type: LoadBalancer
  externalTrafficPolicy: Local
